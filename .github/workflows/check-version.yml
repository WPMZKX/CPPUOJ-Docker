name: Version Check, Release and Build Docker Image

# 触发方式：定时（UTC 16:00，TZ 已统一设为 Asia/Shanghai）和手动触发
on:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai   # 设置时区为 Asia/Shanghai，便于获取正确的构建日期
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version-extract.outputs.version }}
      latest_tag: ${{ steps.check-release.outputs.latest_tag }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Extract version from SVG
      id: version-extract
      run: |
        # 下载并解析 SVG 文件以提取版本号（格式如 vX.Y.Z）
        curl -s -o version.svg https://img.shields.io/npm/v/hydrooj?label=hydrooj
        VERSION=$(grep -oP 'aria-label="hydrooj: \K(v\d+\.\d+\.\d+)' version.svg)
        
        if [ -z "$VERSION" ]; then
          echo "::error::Version extraction failed"
          exit 1
        fi
        
        echo "Extracted version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Get latest release
      id: check-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 通过 GitHub API 获取最新 release 信息
        RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        
        if echo "$RESPONSE" | grep -q '"tag_name":'; then
          LATEST_TAG=$(echo "$RESPONSE" | sed -n 's/.*"tag_name": "\([^"]*\)".*/\1/p')
        else
          LATEST_TAG=""
        fi
        
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Current latest release: $LATEST_TAG"

    - name: Update README.md with new build date and version
      if: ${{ steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag }}
      run: |
        # 获取当前日期（Asia/Shanghai 时区下）
        CURRENT_DATE=$(date +'%Y-%m-%d')
        echo "当前日期: $CURRENT_DATE"
        # 修改 README.md 中对应的构建日期和版本号
        sed -i -E "s/(镜像构建日期 )[0-9]{4}-[0-9]{2}-[0-9]{2}( ，Hydro )v[0-9]+\.[0-9]+\.[0-9]+/\1$CURRENT_DATE\2${{ steps.version-extract.outputs.version }}/" README.md
        echo "更新后的 README.md 内容："
        cat README.md

    - name: Commit and Push README.md update
      if: ${{ steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag }}
      run: |
        # 配置 Git 用户信息
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        # 拉取远程最新提交，自动 stash 未暂存修改
        git pull --rebase --autostash origin ${{ github.ref }}
        git add README.md
        git commit -m "Update README with new build date and version: ${{ steps.version-extract.outputs.version }}"
        git push origin HEAD:${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create New Release
      if: ${{ steps.version-extract.outputs.version != steps.check-release.outputs.latest_tag }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version-extract.outputs.version }}
        release_name: ${{ steps.version-extract.outputs.version }}
        body: |
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version-extract.outputs.version }}
        draft: false
        prerelease: false

  build_and_push_to_ghcr:
    needs: check-release
    if: ${{ needs.check-release.outputs.version != needs.check-release.outputs.latest_tag }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set version variable for docker build (GHCR)
      run: echo "VERSION=${{ needs.check-release.outputs.version }}" >> $GITHUB_ENV

    - name: Convert GitHub repository owner to lowercase
      id: to_lowercase
      run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Build and push backend image to GitHub Container Registry
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        push: true
        tags: |
          ghcr.io/${{ env.REPO_OWNER }}/docker-hoj-backend:latest
          ghcr.io/${{ env.REPO_OWNER }}/docker-hoj-backend:${{ env.VERSION }}

    - name: Build and push judge image to GitHub Container Registry
      uses: docker/build-push-action@v2
      with:
        context: ./judge
        push: true
        tags: |
          ghcr.io/${{ env.REPO_OWNER }}/docker-oj-judge:latest
          ghcr.io/${{ env.REPO_OWNER }}/docker-oj-judge:${{ env.VERSION }}

  build_and_push_to_dockerhub:
    needs: check-release
    if: ${{ needs.check-release.outputs.version != needs.check-release.outputs.latest_tag }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set version variable for docker build (Docker Hub)
      run: echo "VERSION=${{ needs.check-release.outputs.version }}" >> $GITHUB_ENV

    - name: Convert GitHub repository owner to lowercase
      id: to_lowercase
      run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Build and push backend image to Docker Hub
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/docker-hoj-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/docker-hoj-backend:${{ env.VERSION }}

    - name: Build and push judge image to Docker Hub
      uses: docker/build-push-action@v2
      with:
        context: ./judge
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/docker-oj-judge:latest
          ${{ secrets.DOCKER_USERNAME }}/docker-oj-judge:${{ env.VERSION }}
